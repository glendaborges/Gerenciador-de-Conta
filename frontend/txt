[18:25, 11/12/2021] Glenda Borges: PASSO A PASSO FRONTEND DO ANGULAR

Aula 09/12 -

- PARTE DA MANHÃ

-> abrir a pasta do gerenciador de tarefas no vscode

-> no terminal abrir a pasta de frontend do gerenciador de tarefas para criar novos componentes
--> os novos componentes criados serão o inicio, cadastrar e modificar. verificar se na linha de comando o nome da pasta componentes corresponde a do seu arquivo

> ng g c componentes/inicio
> ng g c componentes/cadastrar
> ng g c componentes/modificar

-> conferir se os imports dos componentes foram feitos corretamente na app.modules

->criar os paths no app.routing para que os novos componentes sejam acessados
-->abrir o arquivo app-routing.module no vscode e declarar os paths de raiz, inicio, add e edit/:id e aqual componentes eles pertencem. A const routes deve ficar assim:

const routes: Routes = [
{path:'',redirectTo:'/inicio',pathMatch:'full'},
{path:'inicio', component:InicioComponent},
{path:'add', component:CadastrarComponent},
{path: 'edit/:id', component:ModificarComponent}
];

->mudar o href do nav no header.component.html para routerLink, é como o angular identificará as rotas
-->exemplo de como ficará o nav item de adicionar tarefas:

        <li class="nav-item">
          <a class="nav-link" routerLink="/add">Adicionar Tarefas</a>
        </li>

->colocar o frontend e o backend para rodar
-->abrir a pasta frontend do gerenciador de tarefas no terminal de sua escolha, e então, dar o comando "ng serve -o" para abrir a página
-->abrir a pasta backend do gerenciador de tarefas no terminal de sua escolha, e então, dar o comando "node index" para conectar ao servidor

->gerar os serviços
-->abrir um novo terminal na pasta de frontend do gerenciador de tarefas no terminal para gerar os serviços com a linha de comando:

> ng g servicos/tarefa

->importar a biblioteca de angular no app.module
-->abrir o arquivo app.module.ts para importar o HttpClienteModule e FormsModule, as linhas de código devem ficar assim:

// importando da biblioteca http as rotinas httpClientModule
import { HttpClientModule } from "@angular/common/http";
// importando a biblioteca forms que permite realizar as rotinas com os formulários
import { FormsModule } from "@angular/forms";

-->no mesmo arquivo atualizar o imports do @NgModule, ele deverá ficar assim:

imports: [
BrowserModule,
AppRoutingModule,
HttpClientModule,
FormsModule
],

->abrir o tarefaservice.ts para importar o httpClient, é aqui que faremos a conexão entre frontend e backend
-->abrir o arquivo tarefa.service.ts
-->importar o HttpClient, a linha de comando deverá ficar assim:

import { HttpClient } from '@angular/common/http';

-->declarar a url utilizada no backend no TarefaService, nesse caso estamos usando o localhost na porta 3000 e a raiz /tarefas. aqui também iremos instanciar a httpCLient e utilizar o método get. o código deverá ficar assim:

export class TarefaService {
// através dessa url que o frontend e o backend vão se comunicar
url = 'http://localhost:3000/tarefas'

constructor(private http: HttpClient) {

}
getTarefas(){
return this.http.get(this.url)
}
}

-PARTE DA TARDE

-> importar o arquivo de serviço no inicio.component.ts, pois é lá que ele será usado
-->abrir o arquivo inicio.component.ts
-->importar o TarefaService, vai ficar assim:

// importando a classe tarefaService do arquivo tarefa.service
import { TarefaService } from './../../servicos/tarefa.service';

->criar a função para usar a tarefa lá no inicio.component.ts e instanciá-la
-->então após fechar a chave do ngOnInit() declarar a função listarTarefas, tem que ficar assim:

listarTarefas() {
this.TarefaService.getTarefas().subscribe(
{
next: (resultado) => {
console.log(resultado)
},
error: (e) => console.error(e),
complete: () => console.info('complete')
}
)
}

--> Após criar o função listar tarefa, dentro da chaves do "ngOnInit() {}" deve-se chamar a função listar tarefa
para que assim que  iniciar esse componente a função listarTarefas rodar, tem que ficar assim: 

ngOnInit(): void {
this.listarTarefas()
}

---> o uso do subscribe foi depreciado da primeira maneira que a prof mostrou, essa é a maneira correta (funciona como uma função promise, o next traz o resultado, o error mostra caso tenha erro e o complete é apenas uma info pra dizer que o processo for finalizado )
--->dessa maneira em que está feita a função o resultado é para aparecer no console do navegador quando estiver na rota de início
---> porém, vai ocorrer um erro de CORS, esse erro ocorre pois o navegador diz que o front não tem permissão de rodar o back no mesmo servidor, eles não se reconhecem. para corrigir isso a prof passou um passo a passo.

->correção do erro CORS
-->criar o arquivo proxy.conf.json na raiz da pasta frontend
--> no proxy.conf.json declarar isso:

{
"/tarefas/\*":{
"target":"http://localhost:3000",
"secure":false,
"logLevel":"debug"
}
}

-->no arquivo tarefa.service.ts deixar na url apenas a rota tarefas, assim:

url = '/tarefas'

-->no arquivo package.json ir em scripts e alterar o "start" e o "build", eles vão ficar assim:

    "start": "ng serve --proxy-conf proxy.conf.json",
    "build": "ng build --prod",

-->no arquivo angular.json mais ou menos na linha 70, no atributo "serve", entre o build e o configurations tem que declarar o "options", o "serve" vai ficar assim:

        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "options": {
            "browserTarget": "frontend:build",
            "proxyConfig": "proxy.conf.json"
          },
          "configurations": {
            "production": {
              "browserTarget": "frontend:build:production"
            },
            "development": {
              "browserTarget": "frontend:build:development"
            }
          },
          "defaultConfiguration": "development"
        },

---> rodar o "ng serve -o" de novo, e dessa maneira é pro erro do CORS sair e ser apresentado no console do navegador na rota /inicio

->para apresentar essa lista em uma tabela
--> no arquivo tarefa.service, declarar uma interface. então, após a última chave do export class TarefaService, exportar a interface Tarefa onde serão declaradas as variáveis que usamos no backend, seria como um modelo do mongoose. vai ficar assim:

// criar uma interface/um modelo
export interface Tarefa{
id_tarefa?:string
descricao?:string
obs?:string
}

->importar a tarefa no arquivo inicio.component.ts
--> é só acrescentar Tarefa onde tinha o import TarefaService, o import vai ficar assim:

import { Tarefa, TarefaService } from './../../servicos/tarefa.service';

--->no inicio da class do inicio.component.ts será declarado "ListarTarefas:Tarefa[]"
--->no constructor declarar "this.ListarTarefas = []"
--->e para apresentar o resultado na tabela é preciso chamar lá no resultado do subscribe o "this.ListarTarefas = <any>resultado"
---> vai ficar assim:

export class InicioComponent implements OnInit {
ListarTarefas: Tarefa[]

// dentro do construtor nós declaramos a variável TarefaService com o tipo TarefaService
constructor(private TarefaService: TarefaService) { [this.ListarTarefas = []] }
// ao iniciar esse componente deve-se iniciar a função listarTarefas
ngOnInit(): void {
this.listarTarefas()
}
// aqui é uma função que realiza a listagem das tarefas que estão cadastradas no banco
listarTarefas() {
this.TarefaService.getTarefas().subscribe(
{
next: (resultado) => {
console.log(resultado)
//o any significa que o resultado pode ser de qualquer tipo
this.ListarTarefas = <any>resultado
},
error: (e) => console.error(e),
complete: () => console.info('complete')
}
)
}
}

->construir a tabela com o bootstrap lá no inicio.component.html
--> pode pegar uma tabela padrão do bootstrap e adaptar, então arrumar o thead para os atributos da tabela (id, descrição, obs, editar e excluir)
-->para repetir cada id do banco de dados antes utilizavamos um forEach, aqui utilizaremos o *ngFor. ele tem a seguinte sintaxe: *ngFor="let item of ListarTarefas", isso é chamado no tr. no td nós chamamos cada atributo como se fosse no handlebars entre {{item.nomeDoAtributo}}
--> no final a tabela vai ficar assim:

<table class="table table-striped table-hover">
  <thead>
    <tr>
      <th scope="col">id</th>
      <th scope="col">Descrição</th>
      <th scope="col">Observação</th>
      <th scope="col">Editar</th>
      <th scope="col">Excluir</th>
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let item of ListarTarefas">
      <th scope="row">{{ item.id_tarefa }}</th>
      <td>{{ item.descricao }}</td>
      <td>{{ item.obs }}</td>
      <td>
        <button
          type="button"
          class="btn btn-outline-secondary"
        >Editar</button>
      </td>
      <td>
        <button
          type="button"
          class="btn btn-outline-danger"
        >Excluir</button>
      </td>
    </tr>
  </tbody>
</table>
